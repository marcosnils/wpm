[
  {
    "id": 1,
    "title": "twoSum",
    "language": "js",
    "blocks": [
      "var twoSum = function(nums, target) {\n",
      "    let map = {};\n",
      "    \n",
      "    for (let i = 0; i < nums.length; i++) {\n",
      "        let other = target - nums[i];\n",
      "        \n",
      "        if (other in map) {\n",
      "            return [i, map[other]];\n",
      "        }\n",
      "        \n",
      "        map[nums[i]] = i;\n",
      "    }\n",
      "    \n",
      "    return [];\n",
      "};\n"
    ]
  },
  {
    "id": 2,
    "title": "isPalindrome",
    "language": "js",
    "blocks": [
      "var isPalindrome = function(x) {\n",
      "    if (x < 0) {\n",
      "        return false;\n",
      "    }\n",
      "    \n",
      "    let reverse = 0;\n",
      "    let xcopy = x;\n",
      "    \n",
      "    while (x > 0) {\n",
      "        reverse = (reverse * 10) + (x % 10);\n",
      "        x = Math.floor(x / 10);\n",
      "    }\n",
      "    \n",
      "    return reverse === xcopy;\n",
      "};\n"
    ]
  },
  {
    "id": 5,
    "title": "longestCommonPrefix",
    "language": "js",
    "blocks": [
      "var longestCommonPrefix = function(strs) {\n",
      "    return strs.reduce((prev, next) => {\n",
      "        let i = 0;\n",
      "        while (prev[i] && next[i] && prev[i] === next[i]) i++;\n",
      "        return prev.slice(0, i);\n",
      "    });\n",
      "};\n"
    ]
  },
  {
    "id": 6,
    "title": "mergeTwoLists",
    "language": "js",
    "blocks": [
      "var mergeTwoLists = function(list1, list2) {\n",
      "    let dummy = new ListNode();\n",
      "    let cur = dummy;\n",
      "    \n",
      "    while (list1 && list2) {\n",
      "        if (list1.val > list2.val) {\n",
      "            cur.next = list2;\n",
      "            list2 = list2.next;\n",
      "        } else {\n",
      "            cur.next = list1;\n",
      "            list1 = list1.next;\n",
      "        }\n",
      "        cur = cur.next;\n",
      "    }\n",
      "    \n",
      "    cur.next = list1 || list2;\n",
      "    \n",
      "    return dummy.next;\n",
      "};\n"
    ]
  },
  {
    "id": 7,
    "title": "removeDuplicates",
    "language": "js",
    "blocks": [
      "var removeDuplicates = function(nums) {\n",
      "    let i = 1;\n",
      "    \n",
      "    for (let j = 1; j < nums.length; j++) {\n",
      "        if (nums[j] !== nums[i - 1]) {\n",
      "            nums[i] = nums[j];\n",
      "            i++;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return i;\n",
      "};\n"
    ]
  },
  {
    "id": 8,
    "title": "strStr",
    "language": "js",
    "blocks": [
      "var strStr = function(haystack, needle) {\n",
      "    if (haystack.length < needle.length) {\n",
      "        return -1;\n",
      "    }\n",
      "    \n",
      "    for (let i = 0; i <= haystack.length - needle.length; i++) {\n",
      "        if (haystack.substring(i, i + needle.length) === needle) {\n",
      "            return i;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return -1;\n",
      "};\n"
    ]
  },
  {
    "id": 9,
    "title": "searchInsert",
    "language": "js",
    "blocks": [
      "var searchInsert = function(nums, target) {\n",
      "    let left = 0;\n",
      "    let right = nums.length - 1;\n",
      "    \n",
      "    while (left <= right) {\n",
      "        let mid = Math.floor((left + right) / 2);\n",
      "        \n",
      "        if (nums[mid] === target) {\n",
      "            return mid;\n",
      "        } else if (nums[mid] > target) {\n",
      "            right = mid - 1;\n",
      "        } else {\n",
      "            left = mid + 1;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return left;\n",
      "};\n"
    ]
  },
  {
    "id": 10,
    "title": "lengthOfLastWord",
    "language": "js",
    "blocks": [
      "var lengthOfLastWord = function(s) {\n",
      "    let length = 0;\n",
      "    for (let i = s.length - 1; i >= 0; i--) {\n",
      "        if (s[i] !== ' ') {\n",
      "            length++;\n",
      "        } else if (length > 0) {\n",
      "            break;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return length;\n",
      "};\n"
    ]
  },
  {
    "id": 11,
    "title": "plusOne",
    "language": "js",
    "blocks": [
      "var plusOne = function(digits) {\n",
      "    for (let i = digits.length - 1; i >= 0; i--) {\n",
      "        if (digits[i] + 1 !== 10) {\n",
      "            digits[i] += 1;\n",
      "            return digits;\n",
      "        }\n",
      "        digits[i] = 0;\n",
      "        if (i === 0) {\n",
      "            digits.unshift(1);\n",
      "            return digits;\n",
      "        }\n",
      "    }\n",
      "};\n"
    ]
  },
  {
    "id": 12,
    "title": "addBinary",
    "language": "js",
    "blocks": [
      "var addBinary = function(a, b) {\n",
      "    let carry = 0;\n",
      "    let res = '';\n",
      "    let i = a.length - 1;\n",
      "    let j = b.length - 1;\n",
      "    \n",
      "    while (i >= 0 || j >= 0 || carry) {\n",
      "        let sum = carry;\n",
      "        if (i >= 0) sum += parseInt(a[i]);\n",
      "        if (j >= 0) sum += parseInt(b[j]);\n",
      "        \n",
      "        res = (sum % 2) + res;\n",
      "        carry = Math.floor(sum / 2);\n",
      "        \n",
      "        i--;\n",
      "        j--;\n",
      "    }\n",
      "    \n",
      "    return res;\n",
      "};\n"
    ]
  },
  {
    "id": 13,
    "title": "mySqrt",
    "language": "js",
    "blocks": [
      "var mySqrt = function(x) {\n",
      "    var left = 1;\n",
      "    var right = Math.floor(x / 2) + 1;\n",
      "    var mid;\n",
      "    \n",
      "    while (left <= right) {\n",
      "        mid = Math.floor((left + right) / 2);\n",
      "        \n",
      "        if (mid * mid > x) {\n",
      "            right = mid - 1;\n",
      "        } else if (mid * mid < x) {\n",
      "            left = mid + 1;\n",
      "        } else {\n",
      "            return mid;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return right;\n",
      "};\n"
    ]
  },
  {
    "id": 14,
    "title": "climbStairs",
    "language": "js",
    "blocks": [
      "var climbStairs = function(n) {\n",
      "    if (n <= 3) return n;\n",
      "    \n",
      "    let prev1 = 3;\n",
      "    let prev2 = 2;\n",
      "    let cur = 0;\n",
      "    \n",
      "    for (let i = 3; i < n; i++) {\n",
      "        cur = prev1 + prev2;\n",
      "        prev2 = prev1;\n",
      "        prev1 = cur;\n",
      "    }\n",
      "    \n",
      "    return cur;\n",
      "};\n"
    ]
  },
  {
    "id": 15,
    "title": "deleteDuplicates",
    "language": "js",
    "blocks": [
      "var deleteDuplicates = function(head) {\n",
      "    let res = head;\n",
      "    \n",
      "    while (head && head.next) {\n",
      "        if (head.val === head.next.val) {\n",
      "            head.next = head.next.next;\n",
      "        } else {\n",
      "            head = head.next;\n",
      "        }\n",
      "    }\n",
      "    \n",
      "    return res;\n",
      "};\n"
    ]
  },
  {
    "id": 16,
    "title": "mergeSortedArray",
    "language": "js",
    "blocks": [
      "var merge = function(nums1, m, nums2, n) {\n",
      "    for (let i = m, j = 0; j < n; i++, j++) {\n",
      "        nums1[i] = nums2[j];\n",
      "    }\n",
      "    nums1.sort((a, b) => a - b);\n",
      "};\n"
    ]
  },
  {
    "id": 17,
    "title": "inorderTraversal",
    "language": "js",
    "blocks": [
      "var inorderTraversal = function(root) {\n",
      "    const res = [];\n",
      "    \n",
      "    function inorder(node) {\n",
      "        if (!node) {\n",
      "            return;\n",
      "        }\n",
      "        inorder(node.left);\n",
      "        res.push(node.val);\n",
      "        inorder(node.right);\n",
      "    }\n",
      "    \n",
      "    inorder(root);\n",
      "    return res;\n",
      "};\n"
    ]
  },
  {
    "id": 17,
    "title": "isSameTree",
    "language": "js",
    "blocks": [
      "var isSameTree = function(p, q) {\n",
      "    if (!p && !q) {\n",
      "        return true;\n",
      "    }\n",
      "    \n",
      "    if (p && q && p.val === q.val) {\n",
      "        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);\n",
      "    }\n",
      "    \n",
      "    return false;\n",
      "};\n"
    ]
  },
  {
    "id": 18,
    "title": "isSymmetric",
    "language": "js",
    "blocks": [
      "var isSymmetric = function(root) {\n",
      "    const isMirror = (n1, n2) => {\n",
      "        if (!n1 && !n2) {\n",
      "            return true;\n",
      "        }\n",
      "        \n",
      "        if (!n1 || !n2) {\n",
      "            return false;\n",
      "        }\n",
      "        const leftMirror = isMirror(n1.left, n2.right);\n",
      "        const rightMirror = isMirror(n1.right, n2.left);\n",
      "        return n1.val === n2.val && leftMirror && rightMirror;\n",
      "    };\n",
      "    \n",
      "    return isMirror(root.left, root.right);\n",
      "};\n"
    ]
  }
]
