// @ts-check

export const themes = [
    {
      name: "default",
      tokens: {
        functions: "#2688ff",
        classes: "#fc7e05",
        brackets: "#F2F6FF",
        keywords: "#df75ff",
        comments: "#5C6370",
        strings: "#97ff4d",
        numbers: "#fc7e05",
        variables: "#8ae2ff",
        types: "#ff9e42",
        operators: "#F2F6FF",
        punctuation: "#F2F6FF",
        attributes: "#fc7e05",
        tags: "#8ae2ff",
        text: "#F2F6FF",
        background: "#282C34",
        constants: "#fc7e05",
        decorators: "#df75ff",
        regex: "#97ff4d",
        foreground: "#F2F6FF",
      },
      associations: {
        functions: /function\s*|=>\s*/,
        classes: /\b(?:class|interface|enum)\s+[A-Z]\w*\b/,
        brackets: /[\(\)\[\]\{\}<>]/,
        keywords:
          /\b(?:let|const|var|if|else|for|while|do|switch|case|break|continue|return|import|export|default|from|as|class|extends|super|this|new|try|catch|finally|throw|typeof|instanceof|void|delete|in|of|with|yield|async|await|constructor|interface|type|enum|implements|namespace|abstract|readonly)\b/,
        types: /:\s*[A-Za-z_$][\w$<>, ]*/,
        decorators: /@\w+/,
        regex: /\/(\\\/|[^\/\n])+\/[gimsuy]*/,
        strings: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
        numbers: /\b\d+(\.\d+)?\b/,
        punctuation: /[\.,;:]/,
        operators: /[=+\-*/<>!%&|^~]=?|===?|!==?|<<|>>|>>>/,
        variables: /\b[a-zA-Z_$][a-zA-Z0-9_$]*\b/,
        tags: /<\/?[A-Za-z][\w-]*(?:\s+[^>]+)?>/,
        attributes: /\b[a-zA-Z\-:]+\s*=\s*["'][^"']*["']/,
        constants: /\b[A-Z0-9_]+\b/,
        generics: /<\s*[A-Za-z_$][\w$]*(\s*,\s*[A-Za-z_$][\w$]*)*\s*>/,
      },
    },
    {
        name: "ts",
        tokens: {
            functions: "#61AFEF",
            classes: "#f27c0c",
            brackets: "#e6eeff",
            keywords: "#e48aff",
            comments: "#5C6370",
            strings: "#98C379",
            numbers: "#f27c0c",
            variables: "#E06C75",
            types: "#E5C07B",
            operators: "#56B6C2",
            punctuation: "#e6eeff",
            attributes: "#f27c0c",
            tags: "#E06C75",
            text: "#e6eeff",
            background: "#282C34",
            constants: "#f27c0c",
            decorators: "#e48aff",
            regex: "#98C379",
            foreground: "#e6eeff",
        },
        associations: {
            functions: /function\s*|=>\s*/g,
            classes: /\b(?:class|interface|enum)\s+[A-Z]\w*\b/g,
            brackets: /[\(\)\[\]\{\}<>]/g,
            keywords:
                /\b(?:let|const|var|if|else|for|while|do|switch|case|break|continue|return|import|export|default|from|as|class|extends|super|this|new|try|catch|finally|throw|typeof|instanceof|void|delete|in|of|with|yield|async|await|constructor|interface|type|enum|implements|namespace|abstract|readonly)\b/g,
            types: /:\s*[A-Za-z_$][\w$<>, ]*/g,
            decorators: /@\w+/g,
            regex: /\/(\\\/|[^\/\n])+\/[gimsuy]*/g,
            strings: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/g,
            numbers: /\b\d+(\.\d+)?\b/g,
            punctuation: /[\.,;:]/g,
            operators: /[=+\-*/<>!%&|^~]=?|===?|!==?|<<|>>|>>>/g,
            variables: /\b[a-zA-Z_$][a-zA-Z0-9_$]*\b/g,
            tags: /<\/?[A-Za-z][\w-]*(?:\s+[^>]+)?>/g,
            attributes: /\b[a-zA-Z\-:]+\s*=\s*["'][^"']*["']/g,
            constants: /\b[A-Z0-9_]+\b/g,
            generics: /<\s*[A-Za-z_$][\w$]*(\s*,\s*[A-Za-z_$][\w$]*)*\s*>/g,
        },
    },
];
