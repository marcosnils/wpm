{
  "blocks": [
    [
      "function isUnique(str) {\n",
      "▯▯▯▯let charSet = new Set()[i];\n",
      "▯▯▯▯\n",
      "▯▯▯▯for (let i = 0; i < str.length; i++) {\n",
      "▯▯▯▯▯▯▯▯if (charSet.has(str[i])) {\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯return false;\n",
      "▯▯▯▯▯▯▯▯}\n",
      "▯▯▯▯▯▯▯▯charSet.add(str[i]);\n",
      "▯▯▯▯}\n",
      "▯▯▯▯return true;\n",
      "}\n"
    ],
    [
      "function rotateMatrix(matrix) {\n",
      "▯▯▯▯const n = matrix.length;\n",
      "\n",
      "▯▯▯▯for (let layer = 0; layer < Math.floor(n / 2); layer++) {\n",
      "▯▯▯▯▯▯▯▯let first = layer;\n",
      "▯▯▯▯▯▯▯▯let last = n - 1 - layer;\n",
      "\n",
      "▯▯▯▯▯▯▯▯for (let i = first; i < last; i++) {\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯let offset = i - first;\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯let top = matrix[first][i];\n",
      "\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[first][i] = matrix[last - offset][first];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[last - offset][first] = matrix[last][last - offset];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[last][last - offset] = matrix[i][last];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[i][last] = top;\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[first][i] = matrix[last - offset][first];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[last - offset][first] = matrix[last][last - offset];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[last][last - offset] = matrix[i][last];\n",
      "▯▯▯▯▯▯▯▯▯▯▯▯matrix[i][last] = top;\n",
      "▯▯▯▯▯▯▯▯}\n",
      "▯▯▯▯}\n",
      "▯▯▯▯}\n",
      "}\n"
    ],
    [
      "class Node {\n",
      "    constructor(data) {\n",
      "        this.data = data;\n",
      "        this.next = null;\n",
      "    }\n",
      "}\n",
      "\n",
      "class LinkedList {\n",
      "    constructor() {\n",
      "    }\n",
      "\n",
      "    append(data) {\n",
      "        if (this.head === null) {\n",
      "            this.head = new Node(data);\n",
      "            return;\n",
      "    append(data) {\n",
      "                if (this.head === null) {\n",
      "            this.head = new Node(data);\n",
      "            return;\n",
      "        }\n",
      "        let current = this.head;\n",
      "        while (current.next !== null) {\n",
      "            current = current.next;\n",
      "        }\n",
      "        current.next = new Node(data);\n",
      "        }\n",
      "}\n"
    ],
    [
      "import React, { useState } from 'react';{\n",
      "\n",
      "const SignupForm = () => {\n",
      "  const [formData, setFormData] = useState({\n",
      "    email: '',\n",
      "    password: ''\n",
      "  });\n",
      "\n",
      "  const [submitted, setSubmitted] = useState(false);\n",
      "\n",
      "  const handleChange = (e) => {\n",
      "    setFormData({\n",
      "      ...formData,\n",
      "      [e.target.name]: e.target.value\n",
      "    });\n",
      "  };\n",
      "\n",
      "  const handleSubmit = (e) => {\n",
      "    e.preventDefault();\n",
      "    setSubmitted(true);\n",
      "  };\n",
      "\n",
      "  return (\n"
    ]
  ]
}
